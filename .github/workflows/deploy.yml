name: Deploy

run-name: Manual Deploy by ${{ github.actor }} prod ${{ github.event.inputs.branch }} ${{ github.event.inputs.commit }}

env:
  BUILD_OUTPUT_PATH: "build/"
  BUILD_NAME: "xeni-pilot"

on:
  push:
    branches:
      - 'release/**'

  # workflow_dispatch:
  #   inputs:
  #     version_type:
  #       description: "Version increment type (major, feat, fix, repeat)"
  #       required: true
  #       type: choice
  #       options:
  #         - major
  #         - feat
  #         - fix
  #         - repeat
  #       default: "fix"

permissions:
  contents: write
  id-token: write
  actions: read
  deployments: write

jobs:
  set-version-type:
    runs-on: ubuntu-latest
    outputs:
      version_type: ${{ steps.setver.outputs.version_type }}
    steps:
      - name: Set version_type
        id: setver
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "version_type=${{ github.event.inputs.version_type }}" >> $GITHUB_OUTPUT
            echo "version_type=${{ github.event.inputs.version_type }}" >> $GITHUB_ENV
          else
            # 解析分支名 release/feat/xxx，提取 feat
            ref="${GITHUB_REF##*/}"
            if [[ "$GITHUB_REF" =~ release/([^/]+) ]]; then
              echo "version_type=${BASH_REMATCH[1]}" >> $GITHUB_OUTPUT
              echo "version_type=${BASH_REMATCH[1]}" >> $GITHUB_ENV
            else
              echo "version_type=fix" >> $GITHUB_OUTPUT
              echo "version_type=fix" >> $GITHUB_ENV
            fi
          fi

  increment-tag:
    needs: set-version-type
    uses: Xshuliner/workflows/.github/workflows/auto-increment-tag.yml@master
    with:
      version_type: ${{ needs.set-version-type.outputs.version_type }}
      update_package_json_path: "./package.json"
    secrets: inherit

  build:
    needs: [increment-tag]
    runs-on: ubuntu-latest
    outputs:
      project_name: ${{ env.BUILD_NAME }}
      download_artifact_name: ${{ steps.repo.outputs.download_artifact_name }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Pull latest code
        run: |
          git fetch origin ${{ github.ref_name }}
          git reset --hard origin/${{ github.ref_name }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "yarn"

      - name: Install dependencies
        run: yarn install

      - name: Build
        run: yarn build

      - name: List build result
        run: ls -la ${{ env.BUILD_OUTPUT_PATH }}

      - name: Get repository name
        id: repo
        run: |
          TIMESTAMP=$(date +%Y%m%d%H%M%S)
          REPO_NAME=$(echo "${{ github.repository }}" | tr '/' '_')
          DOWNLOAD_ARTIFACT_NAME="${REPO_NAME}-${TIMESTAMP}"

          echo "download_artifact_name=$DOWNLOAD_ARTIFACT_NAME" >> $GITHUB_OUTPUT

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.repo.outputs.download_artifact_name }}
          path: ${{ env.BUILD_OUTPUT_PATH }}

  deploy:
    needs: [increment-tag, build]
    uses: Xshuliner/workflows/.github/workflows/deploy-release.yml@master
    with:
      version: ${{ needs.increment-tag.outputs.new_version }}
      download_artifact_name: ${{ needs.build.outputs.download_artifact_name }}
      project_name: ${{ needs.build.outputs.project_name }}
